<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ExpressiveAnnotations</name>
    </assembly>
    <members>
        <member name="T:ExpressiveAnnotations.Attributes.AssertThatAttribute">
            <summary>
            Validation attribute, executed for non-null annotated field, which indicates that given assertion has to be satisfied, for such field to be considered as valid.
            </summary>
        </member>
        <member name="T:ExpressiveAnnotations.Attributes.IAttribute">
            <summary>
            Defines contract for simple conditional attributes.
            </summary>
        </member>
        <member name="M:ExpressiveAnnotations.Attributes.IAttribute.FormatErrorMessage(System.String,System.String)">
            <summary>
            Formats the error message.
            </summary>
            <param name="displayName">The user-visible name of the required field to include in the formatted message.</param>
            <param name="preprocessedExpression">The user-visible expression to include in the formatted message.</param>
            <returns>The localized message to present to the user.</returns>
        </member>
        <member name="P:ExpressiveAnnotations.Attributes.IAttribute.DependentProperty">
            <summary>
            Gets or sets the name of dependent field from which runtime value is extracted.
            </summary>
        </member>
        <member name="P:ExpressiveAnnotations.Attributes.IAttribute.TargetValue">
            <summary>
            Gets or sets the expected value for dependent field (wildcard character * stands for any value). There is also possibility 
            of value runtime extraction from backing field, by providing its name [inside square brackets].
            </summary>
        </member>
        <member name="P:ExpressiveAnnotations.Attributes.IAttribute.RelationalOperator">
            <summary>
            Gets or sets the relational operator describing relation between dependent field and target value. Available operators: 
            ==, !=, >, >=, &lt;, &lt;=. If this property is not provided, equality operator == is used by default.
            </summary>
        </member>
        <member name="P:ExpressiveAnnotations.Attributes.IAttribute.SensitiveComparisons">
            <summary>
            Gets or sets whether the string comparisons are case sensitive or not.
            </summary>
        </member>
        <member name="M:ExpressiveAnnotations.Attributes.AssertThatAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ExpressiveAnnotations.Attributes.AssertThatAttribute"/> class.
            </summary>
        </member>
        <member name="M:ExpressiveAnnotations.Attributes.AssertThatAttribute.FormatErrorMessage(System.String,System.String)">
            <summary>
            Formats the error message.
            </summary>
            <param name="displayName">The user-visible name of the required field to include in the formatted message.</param>
            <param name="preprocessedExpression">The user-visible expression to include in the formatted message.</param>
            <returns>The localized message to present to the user.</returns>
        </member>
        <member name="M:ExpressiveAnnotations.Attributes.AssertThatAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Validates the specified value with respect to the current validation attribute.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="validationContext">The context information about the validation operation.</param>
            <returns>
            An instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationResult" /> class.
            </returns>
        </member>
        <member name="P:ExpressiveAnnotations.Attributes.AssertThatAttribute.DependentProperty">
            <summary>
            Gets or sets the name of dependent field from which runtime value is extracted.
            </summary>
        </member>
        <member name="P:ExpressiveAnnotations.Attributes.AssertThatAttribute.TargetValue">
            <summary>
            Gets or sets the expected value for dependent field (wildcard character * stands for any non-empty value). There is also possibility 
            of value runtime extraction from backing field, by providing its name [inside square brackets].
            </summary>
        </member>
        <member name="P:ExpressiveAnnotations.Attributes.AssertThatAttribute.RelationalOperator">
            <summary>
            Gets or sets the relational operator describing relation between dependent field and target value. Available operators: 
            ==, !=, >, >=, &lt;, &lt;=. If this property is not provided, equality operator == is used by default.
            </summary>
        </member>
        <member name="P:ExpressiveAnnotations.Attributes.AssertThatAttribute.SensitiveComparisons">
            <summary>
            Gets or sets whether the string comparisons are case sensitive or not.
            </summary>
        </member>
        <member name="T:ExpressiveAnnotations.Attributes.AssertThatExpressionAttribute">
            <summary>
            Validation attribute, executed for non-null annotated field, which indicates that assertion given in logical expression has to be satisfied, for such field to be considered as valid.
            </summary>
        </member>
        <member name="T:ExpressiveAnnotations.Attributes.IExpressionAttribute">
            <summary>
            Defines contract for complex conditional attributes.
            </summary>
        </member>
        <member name="M:ExpressiveAnnotations.Attributes.IExpressionAttribute.FormatErrorMessage(System.String,System.String)">
            <summary>
            Formats the error message.
            </summary>
            <param name="displayName">The user-visible name of the required field to include in the formatted message.</param>
            <param name="preprocessedExpression">The user-visible expression to include in the formatted message.</param>
            <returns>The localized message to present to the user.</returns>
        </member>
        <member name="P:ExpressiveAnnotations.Attributes.IExpressionAttribute.Expression">
            <summary>
            Gets or sets the logical expression based on which requirement condition is computed. 
            Available expression tokens: &amp;&amp;, ||, !, {, }, numbers and whitespaces.
            </summary>
        </member>
        <member name="P:ExpressiveAnnotations.Attributes.IExpressionAttribute.DependentProperties">
            <summary>
            Gets or sets the names of dependent fields from which runtime values are extracted.
            </summary>
        </member>
        <member name="P:ExpressiveAnnotations.Attributes.IExpressionAttribute.TargetValues">
            <summary>
            Gets or sets the expected values for corresponding dependent fields (wildcard character * stands for any value). There is also 
            possibility of values runtime extraction from backing fields, by providing their names [inside square brackets].
            </summary>
        </member>
        <member name="P:ExpressiveAnnotations.Attributes.IExpressionAttribute.RelationalOperators">
            <summary>
            Gets or sets the relational operators describing relations between dependent fields and corresponding target values.
            Available operators: ==, !=, >, >=, &lt;, &lt;=. If this property is not provided, equality operator == is used by default.
            </summary>
        </member>
        <member name="P:ExpressiveAnnotations.Attributes.IExpressionAttribute.SensitiveComparisons">
            <summary>
            Gets or sets whether the string comparisons are case sensitive or not.
            </summary>
        </member>
        <member name="M:ExpressiveAnnotations.Attributes.AssertThatExpressionAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ExpressiveAnnotations.Attributes.AssertThatExpressionAttribute"/> class.
            </summary>
        </member>
        <member name="M:ExpressiveAnnotations.Attributes.AssertThatExpressionAttribute.FormatErrorMessage(System.String,System.String)">
            <summary>
            Formats the error message.
            </summary>
            <param name="displayName">The user-visible name of the required field to include in the formatted message.</param>
            <param name="preprocessedExpression">The user-visible expression to include in the formatted message.</param>
            <returns>The localized message to present to the user.</returns>
        </member>
        <member name="M:ExpressiveAnnotations.Attributes.AssertThatExpressionAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Validates the specified value with respect to the current validation attribute.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="validationContext">The context information about the validation operation.</param>
            <returns>
            An instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationResult" /> class.
            </returns>
        </member>
        <member name="P:ExpressiveAnnotations.Attributes.AssertThatExpressionAttribute.Expression">
            <summary>
            Gets or sets the logical expression based on which requirement condition is computed.
            Available expression tokens: &amp;&amp;, ||, !, {, }, numbers and whitespaces.
            </summary>
        </member>
        <member name="P:ExpressiveAnnotations.Attributes.AssertThatExpressionAttribute.DependentProperties">
            <summary>
            Gets or sets the names of dependent fields from which runtime values are extracted.
            </summary>
        </member>
        <member name="P:ExpressiveAnnotations.Attributes.AssertThatExpressionAttribute.TargetValues">
            <summary>
            Gets or sets the expected values for corresponding dependent fields (wildcard character * stands for any non-empty value). There is also
            possibility of values runtime extraction from backing fields, by providing their names [inside square brackets].
            </summary>
        </member>
        <member name="P:ExpressiveAnnotations.Attributes.AssertThatExpressionAttribute.RelationalOperators">
            <summary>
            Gets or sets the relational operators describing relations between dependent fields and corresponding target values.
            Available operators: ==, !=, &gt;, &gt;=, &lt;, &lt;=. If this property is not provided, equality operator == is used by default.
            </summary>
        </member>
        <member name="P:ExpressiveAnnotations.Attributes.AssertThatExpressionAttribute.SensitiveComparisons">
            <summary>
            Gets or sets whether the string comparisons are case sensitive or not.
            </summary>
        </member>
        <member name="T:ExpressiveAnnotations.Analysis.Evaluator">
            <summary>
            Type which computes the specified boolean expression.
            </summary>
        </member>
        <member name="M:ExpressiveAnnotations.Analysis.Evaluator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ExpressiveAnnotations.Analysis.Evaluator"/> class.
            </summary>
        </member>
        <member name="M:ExpressiveAnnotations.Analysis.Evaluator.Compute(System.String)">
            <summary>
            Computes the specified boolean expression provided in infix notation.
            </summary>
            <param name="expression">The boolean expression.</param>
            <returns>Computated result.</returns>
            <exception cref="T:System.InvalidOperationException">Logical expression computation failed. Expression is broken.</exception>
        </member>
        <member name="T:ExpressiveAnnotations.Analysis.LexicalAnalysis.Tokenizer">
            <summary>
            Performs basic lexical analysis of provided expression based on given token patterns.
            </summary>
        </member>
        <member name="M:ExpressiveAnnotations.Analysis.LexicalAnalysis.Tokenizer.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:ExpressiveAnnotations.Analysis.LexicalAnalysis.Tokenizer"/> class.
            </summary>
            <param name="patterns">The token patterns.</param>
        </member>
        <member name="M:ExpressiveAnnotations.Analysis.LexicalAnalysis.Tokenizer.Analyze(System.String)">
            <summary>
            Analyzes the specified expression and extracts the array of tokens.
            </summary>
            <param name="expression">The expression.</param>
            <returns>Array of extracted tokens.</returns>
        </member>
        <member name="T:ExpressiveAnnotations.Analysis.SyntacticAnalysis.InfixParser">
            <summary>
            Performs syntactic analysis of provided boolean expression given in infix notation.
            </summary>
        </member>
        <member name="M:ExpressiveAnnotations.Analysis.SyntacticAnalysis.InfixParser.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ExpressiveAnnotations.Analysis.SyntacticAnalysis.InfixParser"/> class.
            </summary>
        </member>
        <member name="M:ExpressiveAnnotations.Analysis.SyntacticAnalysis.InfixParser.Convert(System.String)">
            <summary>
            Converts the specified boolean expression given in infix form into postfix one.
            </summary>
            <param name="expression">The boolean expression.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">
            Infix expression parsing error. Incorrect nesting.
            </exception>
        </member>
        <member name="T:ExpressiveAnnotations.Analysis.SyntacticAnalysis.PostfixParser">
            <summary>
            Performs syntactic analysis of provided boolean expression given in postfix notation.
            </summary>
        </member>
        <member name="M:ExpressiveAnnotations.Analysis.SyntacticAnalysis.PostfixParser.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ExpressiveAnnotations.Analysis.SyntacticAnalysis.PostfixParser"/> class.
            </summary>
        </member>
        <member name="M:ExpressiveAnnotations.Analysis.SyntacticAnalysis.PostfixParser.Evaluate(System.String)">
            <summary>
            Evaluates the specified boolean expression.
            </summary>
            <param name="expression">The boolean expression.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">RPN expression parsing error. Incorrect nesting.</exception>
        </member>
        <member name="T:ExpressiveAnnotations.Misc.Assert">
            <summary>
            Assertions class.
            </summary>
        </member>
        <member name="M:ExpressiveAnnotations.Misc.Assert.ConsistentTypes(System.Reflection.PropertyInfo,System.Object,System.String,System.String)">
            <summary>
            Forces the dependent property and target object to represent exact types.
            This requirement doesn't apply when taret value is null or asterisk.
            </summary>
            <param name="dependentProperty">The dependent property.</param>
            <param name="targetValue">The target value.</param>
            <param name="annotatedPropertyName">Name of the annotated property.</param>
            <param name="relationalOperator">The relational operator.</param>
            <exception cref="T:System.InvalidOperationException">
            </exception>
        </member>
        <member name="M:ExpressiveAnnotations.Misc.Assert.ConsistentTypes(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo,System.String,System.String)">
            <summary>
            Forces the dependent and target properties to represent exact types.
            </summary>
            <param name="dependentProperty">The dependent property.</param>
            <param name="targetProperty">The target property.</param>
            <param name="annotatedPropertyName">Name of the annotated property.</param>
            <param name="relationalOperator">The relational operator.</param>
            <exception cref="T:System.InvalidOperationException">
            </exception>
        </member>
        <member name="T:ExpressiveAnnotations.Analysis.Comparer">
            <summary>
            Type which computes relational operations.
            </summary>
        </member>
        <member name="M:ExpressiveAnnotations.Analysis.Comparer.Compute(System.Object,System.Object,System.String,System.Boolean)">
            <summary>
            Computes relation result.
            </summary>
            <param name="dependentValue">The dependent value.</param>
            <param name="targetValue">The target value.</param>
            <param name="relationalOperator">The relational operator.</param>
            <param name="sensitiveComparisons">Case sensitivity of string comparisons.</param>
            <returns>The boolean result of computation.</returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:ExpressiveAnnotations.Analysis.Comparer.Equal(System.Object,System.Object,System.Boolean)">
            <summary>
            Computes equality comparison.
            </summary>
            <param name="dependentValue">The dependent value.</param>
            <param name="targetValue">The target value (wildcard stands for any value other than null, empty or whitespace strings).</param>
            <param name="sensitiveComparisons">Case sensitivity of string comparisons.</param>
            <returns>The boolean result of comparison.</returns>
        </member>
        <member name="M:ExpressiveAnnotations.Analysis.Comparer.Greater(System.Object,System.Object)">
            <summary>
            Computes "greater than" comparison.
            </summary>
            <param name="dependentValue">The dependent value.</param>
            <param name="targetValue">The target value.</param>
            <returns>The boolean result of comparison.</returns>
            <exception cref="T:System.InvalidOperationException">Greater than and less than relational operations not allowed for arguments of types other than: numeric, string or datetime.</exception>
        </member>
        <member name="M:ExpressiveAnnotations.Analysis.Comparer.Less(System.Object,System.Object)">
            <summary>
            Computes "less than" comparison.
            </summary>
            <param name="dependentValue">The dependent value.</param>
            <param name="targetValue">The target value.</param>
            <returns>The boolean result of comparison.</returns>
            <exception cref="T:System.InvalidOperationException">Greater than and less than relational operations not allowed for arguments of types other than: numeric, string or datetime.</exception>
        </member>
        <member name="T:ExpressiveAnnotations.Misc.MiscHelper">
            <summary>
            Helper class containing various utility methods.
            </summary>
        </member>
        <member name="M:ExpressiveAnnotations.Misc.MiscHelper.TryExtractName(System.Object,System.String@)">
            <summary>
            Tries to extract the name if given inside square brackets in string source.
            </summary>
            <param name="source">The source.</param>
            <param name="name">The name.</param>
            <returns>
            Extracted property name.
            </returns>
        </member>
        <member name="M:ExpressiveAnnotations.Misc.MiscHelper.ExtractProperty(System.Type,System.String)">
            <summary>
            Extracts the property from given type.
            </summary>
            <param name="type">The type.</param>
            <param name="property">The property.</param>
            <returns>
            Extracted property.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            type
            or
            property
            </exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:ExpressiveAnnotations.Misc.MiscHelper.ExtractValue(System.Object,System.String)">
            <summary>
            Extracts the value of property from given source.
            </summary>
            <param name="source">The source.</param>
            <param name="property">The property.</param>
            <returns>
            Extracted property value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source
            or
            property
            or
            Nested field value dynamic extraction interrupted.
            </exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:ExpressiveAnnotations.Misc.MiscHelper.ComposeExpression(System.String,System.String[],System.Object[],System.String[])">
            <summary>
            Prepares expression to be shown in user-friendly form.
            </summary>
            <param name="expression">The logical expression.</param>
            <param name="dependentProperties">The dependent properties.</param>
            <param name="targetValues">The target values.</param>
            <param name="relationalOperators">The relational operators.</param>
            <returns>
            Expression formatted in user-friendly form.
            </returns>
        </member>
        <member name="M:ExpressiveAnnotations.Misc.MiscHelper.ComposeRelationalExpression(System.String,System.Object,System.String)">
            <summary>
            Prepares single relational expression to be shown in user-friendly form.
            </summary>
            <param name="dependentProperty">The dependent property.</param>
            <param name="targetValue">The target value.</param>
            <param name="relationalOperator">The relational operator.</param>
            <returns>
            Expression formatted in user-friendly form.
            </returns>
        </member>
        <member name="T:ExpressiveAnnotations.Attributes.RequiredIfAttribute">
            <summary>
            Validation attribute which indicates that annotated field is required when dependent field has appropriate value.
            </summary>
        </member>
        <member name="M:ExpressiveAnnotations.Attributes.RequiredIfAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ExpressiveAnnotations.Attributes.RequiredIfAttribute"/> class.
            </summary>
        </member>
        <member name="M:ExpressiveAnnotations.Attributes.RequiredIfAttribute.FormatErrorMessage(System.String,System.String)">
            <summary>
            Formats the error message.
            </summary>
            <param name="displayName">The user-visible name of the required field to include in the formatted message.</param>
            <param name="preprocessedExpression">The user-visible expression to include in the formatted message.</param>
            <returns>The localized message to present to the user.</returns>
        </member>
        <member name="M:ExpressiveAnnotations.Attributes.RequiredIfAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Validates the specified value with respect to the current validation attribute.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="validationContext">The context information about the validation operation.</param>
            <returns>
            An instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationResult" /> class.
            </returns>
        </member>
        <member name="P:ExpressiveAnnotations.Attributes.RequiredIfAttribute.DependentProperty">
            <summary>
            Gets or sets the name of dependent field from which runtime value is extracted.
            </summary>
        </member>
        <member name="P:ExpressiveAnnotations.Attributes.RequiredIfAttribute.TargetValue">
            <summary>
            Gets or sets the expected value for dependent field (wildcard character * stands for any non-empty value). There is also possibility 
            of value runtime extraction from backing field, by providing its name [inside square brackets].
            </summary>
        </member>
        <member name="P:ExpressiveAnnotations.Attributes.RequiredIfAttribute.RelationalOperator">
            <summary>
            Gets or sets the relational operator describing relation between dependent field and target value. Available operators: 
            ==, !=, >, >=, &lt;, &lt;=. If this property is not provided, equality operator == is used by default.
            </summary>
        </member>
        <member name="P:ExpressiveAnnotations.Attributes.RequiredIfAttribute.SensitiveComparisons">
            <summary>
            Gets or sets whether the string comparisons are case sensitive or not.
            </summary>
        </member>
        <member name="P:ExpressiveAnnotations.Attributes.RequiredIfAttribute.AllowEmptyOrFalse">
            <summary>
            Gets or sets a flag indicating whether the attribute should allow empty or whitespace strings or false boolean values (null never allowed).
            </summary>
        </member>
        <member name="T:ExpressiveAnnotations.Attributes.RequiredIfExpressionAttribute">
            <summary>
            Validation attribute which indicates that annotated field is required when computed result of given logical expression is true.
            </summary>
        </member>
        <member name="M:ExpressiveAnnotations.Attributes.RequiredIfExpressionAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ExpressiveAnnotations.Attributes.RequiredIfExpressionAttribute"/> class.
            </summary>
        </member>
        <member name="M:ExpressiveAnnotations.Attributes.RequiredIfExpressionAttribute.FormatErrorMessage(System.String,System.String)">
            <summary>
            Formats the error message.
            </summary>
            <param name="displayName">The user-visible name of the required field to include in the formatted message.</param>
            <param name="preprocessedExpression">The user-visible expression to include in the formatted message.</param>
            <returns>The localized message to present to the user.</returns>
        </member>
        <member name="M:ExpressiveAnnotations.Attributes.RequiredIfExpressionAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Validates the specified value with respect to the current validation attribute.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="validationContext">The context information about the validation operation.</param>
            <returns>
            An instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationResult" /> class.
            </returns>
        </member>
        <member name="P:ExpressiveAnnotations.Attributes.RequiredIfExpressionAttribute.Expression">
            <summary>
            Gets or sets the logical expression based on which requirement condition is computed. 
            Available expression tokens: &amp;&amp;, ||, !, {, }, numbers and whitespaces.
            </summary>
        </member>
        <member name="P:ExpressiveAnnotations.Attributes.RequiredIfExpressionAttribute.DependentProperties">
            <summary>
            Gets or sets the names of dependent fields from which runtime values are extracted.
            </summary>
        </member>
        <member name="P:ExpressiveAnnotations.Attributes.RequiredIfExpressionAttribute.TargetValues">
            <summary>
            Gets or sets the expected values for corresponding dependent fields (wildcard character * stands for any non-empty value). There is also 
            possibility of values runtime extraction from backing fields, by providing their names [inside square brackets].
            </summary>
        </member>
        <member name="P:ExpressiveAnnotations.Attributes.RequiredIfExpressionAttribute.RelationalOperators">
            <summary>
            Gets or sets the relational operators describing relations between dependent fields and corresponding target values.
            Available operators: ==, !=, &gt;, &gt;=, &lt;, &lt;=. If this property is not provided, equality operator == is used by default.
            </summary>
        </member>
        <member name="P:ExpressiveAnnotations.Attributes.RequiredIfExpressionAttribute.SensitiveComparisons">
            <summary>
            Gets or sets whether the string comparisons are case sensitive or not.
            </summary>
        </member>
        <member name="P:ExpressiveAnnotations.Attributes.RequiredIfExpressionAttribute.AllowEmptyOrFalse">
            <summary>
            Gets or sets a flag indicating whether the attribute should allow empty or whitespace strings or false boolean values (null never allowed).
            </summary>
        </member>
        <member name="T:ExpressiveAnnotations.Misc.TypeHelper">
            <summary>
            Helper class containing methods related to types maintenance.
            </summary>
        </member>
        <member name="M:ExpressiveAnnotations.Misc.TypeHelper.IsNumeric(System.Object)">
            <summary>
            Determines whether the specified value is type of numeric (string representing a number does not count).
            </summary>
            <param name="value">The value.</param>
            <returns>True if type is numeric, false otherwise.</returns>
        </member>
        <member name="M:ExpressiveAnnotations.Misc.TypeHelper.IsNumeric(System.Type)">
            <summary>
            Determines whether the specified type is numeric.
            </summary>
            <param name="type">The type.</param>
            <returns>True if type is numeric, false otherwise.</returns>
        </member>
        <member name="M:ExpressiveAnnotations.Misc.TypeHelper.IsDateTime(System.Object)">
            <summary>
            Determines whether the specified value is type of DateTime.
            </summary>
            <param name="value">The value.</param>
            <returns>True if value is date time, false otherwise.</returns>
        </member>
        <member name="M:ExpressiveAnnotations.Misc.TypeHelper.IsDateTime(System.Type)">
            <summary>
            Determines whether the specified type is DateTime.
            </summary>
            <param name="type">The type.</param>
            <returns>True if type is date time, false otherwise.</returns>
        </member>
        <member name="M:ExpressiveAnnotations.Misc.TypeHelper.IsString(System.Object)">
            <summary>
            Determines whether the specified value is type of string.
            </summary>
            <param name="value">The value.</param>
            <returns>True if value is string, false otherwise.</returns>
        </member>
        <member name="M:ExpressiveAnnotations.Misc.TypeHelper.IsString(System.Type)">
            <summary>
            Determines whether the specified type is string.
            </summary>
            <param name="type">The type.</param>
            <returns>True if type is string, false otherwise.</returns>
        </member>
        <member name="M:ExpressiveAnnotations.Misc.TypeHelper.IsBool(System.Object)">
            <summary>
            Determines whether the specified value is type of bool.
            </summary>
            <param name="value">The value.</param>
            <returns>True if value is bool, false otherwise.</returns>
        </member>
        <member name="M:ExpressiveAnnotations.Misc.TypeHelper.IsBool(System.Type)">
            <summary>
            Determines whether the specified type is bool.
            </summary>
            <param name="type">The type.</param>
            <returns>True if type is bool, false otherwise.</returns>
        </member>
        <member name="M:ExpressiveAnnotations.Misc.TypeHelper.GetCoarseType(System.Type)">
            <summary>
            Gets the coarse type name.
            </summary>
            <param name="type">The type.</param>
            <returns>Coarse type name: datetime, numeric, string, bool or complex.</returns>
        </member>
    </members>
</doc>
