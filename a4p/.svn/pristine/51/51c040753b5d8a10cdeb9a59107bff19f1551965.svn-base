@using ADOPets.Web.Common.Helpers
@using Model
@using Resources = ADOPets.Web.Resources.Wording
@model IEnumerable<ADOPets.Web.ViewModels.Height.IndexViewModel>
@using ADOPets.Web.Common.Extensions

<div id="heightList" class="table-responsive">
    @Html.RenderSuccessMessage("heightSuccessMessage", TempData["SuccessMessage"])
    <div id="HeightTable">
        <table id="Table_Height" class="table table-striped table-bordered">
            <thead>
                <tr class="text-primary">
                    <th>@Resources.Height_Index_Date</th>
                    <th>@Resources.Height_Index_Height</th>
                    @if (UserHelper.CanDeletePet(ViewBag.PetId))
                    {
                        if (ShareInfoHelper.IsSharedUser(ViewBag.PetId, ViewBag.UserId))
                        {
                            if (SMOHelper.CanEditPet(ViewBag.PetId))
                            {
                        <th>@Resources.Height_Index_Action</th>
                            }
                        }
                    }
                </tr>
            </thead>

            @foreach (var item in Model)
            {
                <tr>
                    <td>@item.Date.ToShortDateString()</td>
                    <td>@item.Height</td>
                    @if (UserHelper.CanDeletePet(ViewBag.PetId))
                    {
                        if (ShareInfoHelper.IsSharedUser(ViewBag.PetId, ViewBag.UserId))
                        {
                            if (SMOHelper.CanEditPet(ViewBag.PetId))
                            {
                        <td>
                            <a href="@Url.Action("Edit", "Height", new { measureId = item.Id, unit = ViewBag.MeasureUnit })" class="editHeight btn btn-success btn-sm" data-tooltip="tooltip" data-placement="top" 
                       data-original-title="@Resources.Height_Index_Edit"><i class="fa fa-pencil"></i></a>
                            <a href="@Url.Action("DeleteConfirm", "Height", new { measureId = item.Id, unit = ViewBag.MeasureUnit })" class="deleteHeight btn btn-warning btn-sm" data-tooltip="tooltip" data-placement="top" 
                             data-original-title="@Resources.Height_Index_Delete"><i class="fa fa-trash-o"></i></a>
                        </td>
                            }
                        }
                    }
                </tr>  
            }
        </table>
    </div>
    <div id="HeightCurve" style="display: none;">
        <div id="Heightcontainer" style="min-width: 310px; width: 100%; height: 400px;"></div>
    </div>

    @{
        var unit = ViewBag.MeasureUnit ?? DomainHelper.GetHeightMeasureUnitDefault();
        var header = unit == HealthMeasureUnitEnum.Feet ? string.Format("{0} ({1})", Resources.Height_Index_Title, Resources.Height_Index_FtInches) : string.Format("{0} ({1})", Resources.Height_Index_Title, Resources.Height_Index_Mcm);
        var unitLeft = EnumHelper.GetResourceValueForEnumValue(unit);
        var unitRight = unit == HealthMeasureUnitEnum.Feet ? EnumHelper.GetResourceValueForEnumValue(HealthMeasureUnitEnum.Inches) : EnumHelper.GetResourceValueForEnumValue(HealthMeasureUnitEnum.Centimeter);
        var YAxis = Model.OrderBy(i => i.Date).Select(w => w.HeightValue).ToArray();
        var xAxis = Model.OrderBy(i => i.Date).Select(w => w.Date.ToShortDateString()).ToArray();
    }

    <script type="text/javascript">

        function ShowHeightCurve() {
            $('#HeightTable').hide();
            $('#HeightCurve').show();
            $('#showHideHeightButtons').hide();
            $('#showHideHeightButtons-back').show();
            createHeightChart();
        }

        function createHeightChart() {
            var y;

            var x = @Html.Raw(Json.Encode(xAxis))

         y = @Html.Raw(Json.Encode(YAxis))

            $('#Heightcontainer').highcharts({
                title: {
                    text: '@header',
                    useHTML: true,
                    x: -20 //center
                },
                xAxis: {
                    title: {
                        text: '@Resources.Height_Index_Date'
                    },
                    categories: x,
                    labels: {
                        rotation: -45
                    }
                },
                yAxis: {
                    title: {
                        text: '@Resources.Height_Index_Title',
                        useHTML: true
                    },
                    plotLines: [{
                        value: 0,
                        width: 1,
                        color: '#808080'
                    }]
                },
                plotOptions: {
                    area: {
                        fillColor: {
                            linearGradient: { x1: 0, y1: 0, x2: 0, y2: 1 },
                            stops: [
                                [0, Highcharts.getOptions().colors[0]],
                                [1, Highcharts.Color(Highcharts.getOptions().colors[0]).setOpacity(0).get('rgba')]
                            ]
                        },
                        marker: {
                            radius: 2
                        },
                        lineWidth: 2,
                        states: {
                            hover: {
                                lineWidth: 2
                            }
                        },
                        threshold: null
                    },
                    series: {
                        animation: {
                            duration: 2500
                        }
                    }
                },
                tooltip: {
                    formatter: function () {
                        var arr = this.y.toString().indexOf(',') != -1 ? this.y.toString().split(',') : this.y.toString().split('.');

                        var leftValue = arr[0] != '0' ? arr[0] + ' @unitLeft ' : '';
                        var rightValue = arr.length > 1 ? arr[1] : '';

                        if (rightValue != '') {
                            if (rightValue.length == 1) {
                                rightValue += '0';
                            }
                            else if (rightValue.length == 2 && rightValue[0] == '0') {
                                rightValue = rightValue[1];
                            }
                            rightValue += ' @unitRight';
                        }

                        return '<span style="font-size: 10px;">' + this.x + '</span><br/>' + '@Html.Raw(Resources.Height_Index_Height): <b>' + leftValue + rightValue + '</b>';
                    }
                },
                legend: {
                    layout: 'vertical',
                    align: 'right',
                    verticalAlign: 'middle',
                    borderWidth: 0
                },
                series: [{
                    type: 'area',
                    name: '@Html.Raw(Resources.Height_Index_Height)',
                    data: y
                }]
            });
        }
    </script>
</div>

<script src="~/Scripts/customs/views/Height/List.js"></script>
