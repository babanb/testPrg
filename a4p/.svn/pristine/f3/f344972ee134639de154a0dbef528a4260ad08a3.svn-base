@using ADOPets.Web.Common.Helpers
@using Model
@using Resources = ADOPets.Web.Resources.Wording
@model IEnumerable<ADOPets.Web.ViewModels.Weight.IndexViewModel>
@using ADOPets.Web.Common.Extensions

<div id="weightList" class="table-responsive">
    @Html.RenderSuccessMessage("weightSuccessMessage", TempData["SuccessMessage"])
    <div id="WeightTable">
        <table id="Table_Weight" class="table table-striped table-bordered">
            <thead>
                <tr class="text-primary">
                    <th>@Resources.Weight_Index_Date</th>
                    <th>@Resources.Weight_Index_Weight</th>
                    @if (UserHelper.CanDeletePet(ViewBag.PetId))
                    {
                        if (ShareInfoHelper.IsSharedUser(ViewBag.PetId, ViewBag.UserId))
                        {
                            if (SMOHelper.CanEditPet(ViewBag.PetId))
                            {
                        <th>@Resources.Weight_Index_Action</th>
                            }
                        }
                    }
                </tr>
            </thead>

            @foreach (var item in Model)
            {
                <tr>
                    <td>@item.Date.ToShortDateString()</td>
                    <td>@item.Weight</td>
                    @if (UserHelper.CanDeletePet(ViewBag.PetId))
                    {
                        if (ShareInfoHelper.IsSharedUser(ViewBag.PetId, ViewBag.UserId))
                        {
                            if (SMOHelper.CanEditPet(ViewBag.PetId))
                            {
                        <td>
                            <a href="@Url.Action("Edit", "Weight", new { measureId = item.Id, unit = ViewBag.MeasureUnit })" class="editWeight btn btn-success btn-sm" data-tooltip="tooltip" data-placement="top" 
                           data-original-title="@Resources.Weight_Index_Edit"><i class="fa fa-pencil"></i></a>
                            <a href="@Url.Action("DeleteConfirm", "Weight", new { measureId = item.Id, unit = ViewBag.MeasureUnit })" class="deleteWeight btn btn-warning btn-sm" data-tooltip="tooltip" data-placement="top" 
                          data-original-title="@Resources.Weight_Index_Delete"><i class="fa fa-trash-o"></i></a>
                        </td>
                            }
                        }
                    }
                </tr>  
            }
        </table>
    </div>

    <div id="WeightCurve" style="display: none;">
        <div id="Weightcontainer" style="min-width: 310px; width: 100%; height: 400px;"></div>
    </div>

    @{
        var unit = ViewBag.MeasureUnit ?? DomainHelper.GetWeightMeasureUnitDefault();
        var header = unit == HealthMeasureUnitEnum.Pounds ? string.Format("{0} ({1})", Resources.Weight_Index_Title, Resources.Weight_Index_LbOz) : string.Format("{0} ({1})", Resources.Weight_Index_Title, Resources.Weight_Index_Kgg);
        var unitLeft = EnumHelper.GetResourceValueForEnumValue(unit);
        var unitRight = unit == HealthMeasureUnitEnum.Pounds ? EnumHelper.GetResourceValueForEnumValue(HealthMeasureUnitEnum.Ounce) : EnumHelper.GetResourceValueForEnumValue(HealthMeasureUnitEnum.Gram);
        var YAxis = Model.OrderBy(i => i.Date).Select(w => w.WeightValue).ToArray();
        var xAxis = Model.OrderBy(i => i.Date).Select(w => w.Date.ToShortDateString()).ToArray();
    }

    <script type="text/javascript">
        function ShowWeightCurve() {
            $('#WeightTable').hide();
            $('#WeightCurve').show();
            $('#showHideWeightButtons').hide();
            $('#showHideWeightButtons-back').show();
            createWeightChart();
        }

        function createWeightChart() {
            var y;

            var x = @Html.Raw(Json.Encode(xAxis))

         y = @Html.Raw(Json.Encode(YAxis))

        $('#Weightcontainer').highcharts({
            title: {
                text: '@header',
                useHTML: true,
                x: -20 //center
            },
            xAxis: {
                title: {
                    text: '@Resources.Weight_Index_Date'
                },
                categories: x,
                labels: {
                    rotation: -45
                }
            },
            yAxis: {
                title: {
                    text: '@Resources.Weight_Index_Title',
                    useHTML: true
                },
                plotLines: [{
                    value: 0,
                    width: 1,
                    color: '#808080'
                }]
            },
            plotOptions: {
                area: {
                    fillColor: {
                        linearGradient: { x1: 1, y1: 0, x2: 0, y2: 1 },
                        stops: [
                            [0, Highcharts.getOptions().colors[0]],
                            [1, Highcharts.Color(Highcharts.getOptions().colors[0]).setOpacity(0).get('rgba')]
                        ]
                    },
                    marker: {
                        radius: 2
                    },
                    lineWidth: 2,
                    states: {
                        hover: {
                            lineWidth: 2
                        }
                    },
                    threshold: null
                },
                series: {
                    animation: {
                        duration: 2500
                    }
                }
            },
            tooltip: {
                formatter: function () {
                    var arr = this.y.toString().indexOf(',') != -1 ? this.y.toString().split(',') : this.y.toString().split('.');

                    var leftValue = arr[0] != '0' ? arr[0] + ' @unitLeft ' : '';
                    var rightValue = arr.length > 1 ? arr[1] : '';

                    if (rightValue != '') {

                        if (rightValue.length == 1) {//1 --> 100
                            rightValue += '00';
                        }

                        else if (rightValue.length == 2) {
                            if (rightValue[0] != '0') {//11 --> 110
                                rightValue += '0';
                            } else {//01 --> 10
                                rightValue = rightValue.substr(1) + '0';
                            }
                        }

                        else if (rightValue.length == 3) {
                            if (rightValue[0] == '0' && rightValue[1] == '0') {//001 --> 1
                                rightValue = rightValue[2];
                            } else if (rightValue[0] == '0' && rightValue[1] != '0') {//011 --> 11
                                rightValue = rightValue.substr(1);
                            }
                        }

                        rightValue += ' @unitRight';
                    }

                    return '<span style="font-size: 10px;">' + this.x + '</span><br/>' + '@Html.Raw(Resources.Weight_Index_Weight): <b>' + leftValue + rightValue + '</b>';
                }
            },
            legend: {
                layout: 'vertical',
                align: 'right',
                verticalAlign: 'middle',
                borderWidth: 0
            },
            series: [{
                type: 'area',
                name: '@Html.Raw(Resources.Weight_Index_Weight)',
                data: y
            }]
        });
    }
    </script>

</div>

<script src="~/Scripts/customs/views/Weight/List.js"></script>
